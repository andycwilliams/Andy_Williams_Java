CREATE CONTAINER FROM IMAGE:
docker container run -d -p 3306:3306 \
--env MYSQL_ROOT_PASSWORD=password4 \
--volume="C:/Users/awill/code/__SMU Boot Camp__/Module 6 - Deployment and Authentication/Created/pet-inventory-db/db/data":/var/lib/mysql \
--network=petnetwork \
--name=pet-inventory-db pet-inventory-db

docker run -d -p 8080:8080 --network=petnetwork --name=pet-inventory-db pet-inventory-db

docker container run -d -p 3306:3306 --name mysqldb --env MYSQL_ROOT_PASSWORD=password5 mysql

Removes all images?
docker rmi $(docker images -a -q)

------------------------------

Build image on Java app and have it talk to the database

Sanity check: 
docker container exec -it pet-inventory-db bash
mysql -u root -p
password4
show databases;
-- confirm the db is there
use pet_inventory;
show tables;
-- confirm the pet table (probably pet) is there
select * from pet; (if there is data there)

build image of java app (see 6.1) using petnetwork
confirm you can use your dockerized app from your own browser (http://localhost:8080/pet)

push to heroku
need to change port in application.properties (server.port=${PORT})
rebuild .jar file
repository
login with heroku, heroku container
will need jawsdb stuff

------------------------------------------------------------

Open a terminal, navigate to the folder that contains the Dockerfile, and enter the following command:
docker build -t smubootcamp/musicstore-recommendations .

docker run -d -p 7979:7979 --name smubootcamp/musicstore-recommendations

CREATE CONTAINER FROM IMAGE:
docker container run -d -p 3306:3306 \
--env MYSQL_ROOT_PASSWORD=password6 \
--volume="C:/Users/awill/code/__SMU Boot Camp__/Andy_Williams_Java/M7-Challenge-Williams-Andy/music-store-recommendations":/var/lib/mysql \
--network=msrnetwork \
--name=musicstore-recommendations smubootcamp/musicstore-recommendations

docker run -d -p 7654:8080 --name new-musicstore-recommendations smubootcamp/musicstore-recommendations

------------------------------



------------------------------------------------------------

Docker terminal commands:

docker rmi <image id> --force


Creating a container and running it:
docker container run -it -p 80:80 test

You can deploy 45 applications in one single container if you wanted. You might deploy multiple apps in one container if they are tightly coupled.